import { API_ENDPOINTS } from '@/constants'
import type { Mood, MoodListResponse, MoodResponse } from '@/type'
import { apiService } from './ApiService'

export class MoodService {
   /**
    * L·∫•y danh s√°ch t·∫•t c·∫£ moods (fetch t·∫•t c·∫£ pages)
    */
   async getAllMoods(): Promise<Mood[]> {
      try {
         console.log('üîÑ Fetching all moods from API...')
         
         // B·∫Øt ƒë·∫ßu v·ªõi page ƒë·∫ßu ti√™n ƒë·ªÉ bi·∫øt t·ªïng s·ªë pages
         const firstPageResponse = await this.getMoodsPaginated(1, 50) // L·∫•y 50 items per page
         
         if (!firstPageResponse) {
            console.log('‚ö†Ô∏è No response from API, using fallback moods')
            return this.getDefaultMoods()
         }
         
         let allMoods: Mood[] = this.transformMoodResponses(firstPageResponse.content)
         
         // N·∫øu c√≥ nhi·ªÅu pages, fetch c√°c pages c√≤n l·∫°i
         if (firstPageResponse.totalPages > 1) {
            console.log(`üìÑ Total pages: ${firstPageResponse.totalPages}, fetching remaining pages...`)
            
            const remainingPagePromises: Promise<MoodListResponse | null>[] = []
            for (let page = 2; page <= firstPageResponse.totalPages; page++) {
               remainingPagePromises.push(this.getMoodsPaginated(page, 50))
            }
            
            const remainingPagesResponses = await Promise.allSettled(remainingPagePromises)
            
            // Combine t·∫•t c·∫£ results
            remainingPagesResponses.forEach((result, index) => {
               if (result.status === 'fulfilled' && result.value) {
                  const transformedMoods = this.transformMoodResponses(result.value.content)
                  allMoods = allMoods.concat(transformedMoods)
                  console.log(`‚úÖ Page ${index + 2} fetched: ${transformedMoods.length} moods`)
               } else {
                  console.error(`‚ùå Failed to fetch page ${index + 2}:`, result.status === 'rejected' ? result.reason : 'No data')
               }
            })
         }
         
         console.log(`‚úÖ Successfully fetched ${allMoods.length} moods from API`)
         return allMoods
         
      } catch (error) {
         console.error('‚ùå Error fetching moods from API, using fallback:', error)
         // Return default moods as fallback - kh√¥ng show toast error ƒë·ªÉ kh√¥ng l√†m phi·ªÅn user
         return this.getDefaultMoods()
      }
   }

   /**
    * L·∫•y moods v·ªõi ph√¢n trang (internal method)
    */
   private async getMoodsPaginated(page: number = 1, size: number = 10): Promise<MoodListResponse | null> {
      try {
         console.log(`üì° Fetching moods - Page: ${page}, Size: ${size}`)
         
         const response = await apiService.get<MoodListResponse>(
            `${API_ENDPOINTS.MOODS.LIST}?page=${page}&size=${size}`
         )
         
         if (response.statusCode === 200 && response.data) {
            console.log(`‚úÖ Page ${page} fetched: ${response.data.content.length} moods`)
            return response.data
         }
         
         console.log(`‚ö†Ô∏è Invalid response for page ${page}:`, response)
         return null
         
      } catch (error) {
         console.error(`‚ùå Error fetching page ${page}:`, error)
         return null
      }
   }

   /**
    * Transform MoodResponse[] th√†nh Mood[] 
    */
   private transformMoodResponses(moodResponses: MoodResponse[]): Mood[] {
      return moodResponses.map(moodResponse => ({
         id: moodResponse.id,
         name: moodResponse.name,
         emoji: moodResponse.emoji,
         createdAt: moodResponse.createdAt,
         postCount: moodResponse.postCount,
         // T·∫°o description t·ª´ name n·∫øu backend kh√¥ng c√≥
         description: `C·∫£m x√∫c ${moodResponse.name.toLowerCase()}`
      }))
   }

   /**
    * L·∫•y moods v·ªõi ph√¢n trang (public method cho UI components)
    * @param page Page number (1-based)
    * @param size Page size
    * @returns Promise v·ªõi MoodListResponse ho·∫∑c null n·∫øu l·ªói
    */
   async getMoodsWithPagination(page: number = 1, size: number = 10): Promise<MoodListResponse | null> {
      return this.getMoodsPaginated(page, size)
   }

   /**
    * Default moods as fallback
    */
   private getDefaultMoods(): Mood[] {
      return [
         { id: '1', name: 'Delicious', emoji: 'üòã', description: 'Ngon tuy·ªát v·ªùi' },
         { id: '2', name: 'Amazing', emoji: 'üî•', description: 'Tuy·ªát v·ªùi' },
         { id: '3', name: 'Love it', emoji: '‚ù§Ô∏è', description: 'Y√™u th√≠ch' },
         { id: '4', name: 'Perfect', emoji: 'üòç', description: 'Ho√†n h·∫£o' },
         { id: '5', name: 'Craving', emoji: 'ü§§', description: 'Th√®m thu·ªìng' },
         { id: '6', name: 'Excellent', emoji: 'üëå', description: 'Xu·∫•t s·∫Øc' },
         { id: '7', name: 'Outstanding', emoji: 'üíØ', description: 'N·ªïi b·∫≠t' },
         { id: '8', name: 'Celebration', emoji: 'üéâ', description: 'ƒÇn m·ª´ng' },
      ]
   }
}

// Export singleton instance
export const moodService = new MoodService()
export default moodService
